import {
    http,
    type Address,
    type Hex,
    concat,
    createPublicClient,
    getCreate2Address,
    encodeFunctionData,
    toHex,
    parseAbi
} from "viem"
import { foundry } from "viem/chains"
import { getAnvilWalletClient } from "./utils/index.js"

// https://github.com/Vectorized/solady/blob/main/test/utils/mocks/MockERC1155.sol
const MOCK_ERC1155_BYTECODE: Hex =
    ""

export const deployMockERC1155 = async ({
    anvilRpc
}: {
    anvilRpc: string
}): Promise<Address> => {
    const publicClient = createPublicClient({
        transport: http(anvilRpc),
        chain: foundry
    })

    // Deploy mock ERC1155 contract
    const walletClient = getAnvilWalletClient({
        addressIndex: 0,
        anvilRpc
    })

    const counterFactual = getCreate2Address({
        from: "0x4e59b44847b379578588920ca78fbf26c0b4956c",
        salt: toHex(0, { size: 32 }),
        bytecode: MOCK_ERC1155_BYTECODE
    })

    const bytecode = await publicClient.getCode({
        address: counterFactual
    })

    if (!bytecode || bytecode === "0x") {
        // If it doesn't exist, deploy it
        await walletClient.sendTransaction({
            data: concat([
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                MOCK_ERC1155_BYTECODE
            ]),
            to: "0x4e59b44847b379578588920ca78fbf26c0b4956c"
        })
    }

    return counterFactual
}

// Mint a token to the specified address
export const mintERC1155 = async ({
    contractAddress,
    to,
    tokenId,
    amount,
    anvilRpc
}: {
    contractAddress: Address
    to: Address
    tokenId: bigint
    amount: bigint
    anvilRpc: string
}): Promise<Hex> => {
    const walletClient = getAnvilWalletClient({
        addressIndex: 0,
        anvilRpc
    })

    const tx = await walletClient.sendTransaction({
        to: contractAddress,
        data: encodeFunctionData({
            abi: parseAbi([
                "function mint(address to, uint256 id, uint256 amount, bytes memory data)"
            ]),
            functionName: "mint",
            args: [to, tokenId, amount, "0x"]
        })
    })

    return tx
}
