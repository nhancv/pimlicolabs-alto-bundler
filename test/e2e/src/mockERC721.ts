import {
    http,
    type Address,
    type Hex,
    concat,
    createPublicClient,
    getCreate2Address,
    encodeFunctionData,
    toHex,
    parseAbi
} from "viem"
import { foundry } from "viem/chains"
import { getAnvilWalletClient } from "./utils/index.js"

// https://github.com/Vectorized/solady/blob/main/test/utils/mocks/MockERC721.sol
const MOCK_ERC721_BYTECODE: Hex =
    "0x6080604052348015600f57600080fd5b5061189d8061001f6000396000f3fe6080604052600436106101fe5760003560e01c806370a082311161011d578063a1448194116100b0578063b88d4fde1161007f578063c87b56dd11610064578063c87b56dd146106a4578063e985e9c5146106c4578063fb25fb7a146106fa57600080fd5b8063b88d4fde14610644578063bf0b175e1461065757600080fd5b8063a1448194146105c4578063a22cb465146105e4578063a824b24614610604578063a8721c2e1461062457600080fd5b80638832e6e3116100ec5780638832e6e31461051e57806395d89b411461053e578063991bbee914610584578063a0621994146105a457600080fd5b806370a08231146104745780638529eea6146104a257806385d7dc30146104c257806386cd7e96146104d557600080fd5b80633c79ca0311610195578063430c208111610164578063430c2081146103f45780634f558e7914610414578063518066d8146104345780636352211e1461045457600080fd5b80633c79ca031461036457806340c10f19146103a157806342842e0e146103c157806342966c68146103d457600080fd5b8063095ea7b3116101d1578063095ea7b3146102fe5780631ceb915a1461031157806323b872dd1461033157806338e297991461034457600080fd5b806301ffc9a71461020357806303a96fd71461025557806306fdde0314610277578063081812fc146102c6575b600080fd5b34801561020f57600080fd5b5061024061021e366004611468565b6301ffc9a760e09190911c9081146380ac58cd821417635b5e139f9091141790565b60405190151581526020015b60405180910390f35b34801561026157600080fd5b506102756102703660046114dd565b61071a565b005b34801561028357600080fd5b5060408051808201909152600881527f54455354204e465400000000000000000000000000000000000000000000000060208201525b60405161024c919061153d565b3480156102d257600080fd5b506102e66102e1366004611570565b61073a565b6040516001600160a01b03909116815260200161024c565b61027561030c366004611589565b610779565b34801561031d57600080fd5b5061027561032c3660046115fc565b61078f565b61027561033f36600461166b565b6107f1565b34801561035057600080fd5b5061027561035f36600461166b565b61080c565b34801561037057600080fd5b5061038461037f366004611570565b610830565b6040516bffffffffffffffffffffffff909116815260200161024c565b3480156103ad57600080fd5b506102756103bc366004611589565b610857565b6102756103cf36600461166b565b610869565b3480156103e057600080fd5b506102756103ef366004611570565b610884565b34801561040057600080fd5b5061024061040f366004611589565b610891565b34801561042057600080fd5b5061024061042f366004611570565b6108ac565b34801561044057600080fd5b5061027561044f3660046116a8565b6108d3565b34801561046057600080fd5b506102e661046f366004611570565b6108ee565b34801561048057600080fd5b5061049461048f3660046116e4565b61092c565b60405190815260200161024c565b3480156104ae57600080fd5b506102756104bd366004611589565b610967565b6102756104d036600461166b565b6109c1565b3480156104e157600080fd5b506102756104f03660046116ff565b6000828152673ec412a9852d173d60c11b601c526020902082018201805460a081811c8418901b1890555050565b34801561052a57600080fd5b5061027561053936600461172b565b6109e6565b34801561054a57600080fd5b5060408051808201909152600481527f544553540000000000000000000000000000000000000000000000000000000060208201526102b9565b34801561059057600080fd5b5061027561059f366004611570565b610a35565b3480156105b057600080fd5b506102e66105bf366004611570565b610a3e565b3480156105d057600080fd5b506102756105df366004611589565b610aa0565b3480156105f057600080fd5b506102756105ff3660046116a8565b610ab2565b34801561061057600080fd5b5061027561061f366004611785565b610ac4565b34801561063057600080fd5b5061027561063f36600461166b565b610afa565b6102756106523660046115fc565b610b06565b34801561066357600080fd5b506106776106723660046116e4565b610b23565b6040517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff909116815260200161024c565b3480156106b057600080fd5b506102b96106bf366004611570565b610b52565b3480156106d057600080fd5b506102406106df3660046117d2565b601c52670a5a2e7a000000006008526000526030600c205490565b34801561070657600080fd5b506102e6610715366004611570565b610bc8565b61073561072684610c30565b8361073084610c52565b610c6f565b505050565b600081600052673ec412a9852d173d60c11b601c52602060002082018201805460601b61076f5763ceea21b66000526004601cfd5b6001015492915050565b61078b61078583610c30565b82610cfa565b5050565b6107ea61079b33610c30565b6107a487610c30565b6107ad87610c30565b8686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d0592505050565b5050505050565b6107356107fd84610c30565b61080684610c30565b83610d24565b61073561081833610c30565b61082185610c30565b61082a85610c30565b84610e24565b6000818152673ec412a9852d173d60c11b601c5260208120820182015460a01c5b92915050565b61078b61086383610c30565b82610e40565b61073561087584610c30565b61087e84610c30565b83610ee1565b61088e3382610f0e565b50565b60006108a561089f84610c30565b83610fdc565b9392505050565b6000818152673ec412a9852d173d60c11b601c5260208120820182015460601b1515610851565b61078b6108df33610c30565b6108e884610c30565b83611048565b6000818152673ec412a9852d173d60c11b601c526020902081018101546001600160a01b0316806109275763ceea21b66000526004601cfd5b919050565b60008161094157638f4eb6046000526004601cfd5b673ec412a9852d173d60c11b601c528160005263ffffffff601c600c2054169050919050565b61097961097333610c30565b82610fdc565b6109af576040517f4b6e7f1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61078b6109bb83610c30565b826110ac565b6107356109ce6000610c30565b6109d785610c30565b6109e085610c30565b846110b8565b610a2f6109f285610c30565b8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111c092505050565b50505050565b61088e816111de565b6000818152673ec412a9852d173d60c11b601c5260208120820182015460601b610a7b5760405163677510db60e11b815260040160405180910390fd5b6000828152673ec412a9852d173d60c11b601c52602090208201820160010154610851565b61078b610aac83610c30565b826111e9565b61078b610abe83610c30565b82611203565b61078b610ad083610c30565b673ec412a9852d173d60c11b601c908152600091909152600c208054602081811c8518901b189055565b6107356109ce33610c30565b6107ea610b1286610c30565b610b1b86610c30565b858585611259565b6000610851610b3183610c30565b673ec412a9852d173d60c11b601c908152600091909152600c205460201c90565b6060610b7c826000818152673ec412a9852d173d60c11b601c52602090208101015460601b151590565b610b995760405163677510db60e11b815260040160405180910390fd5b610ba2826112ad565b604051602001610bb291906117fc565b6040516020818303038152906040529050919050565b6000818152673ec412a9852d173d60c11b601c5260208120820182015460601b610c055760405163677510db60e11b815260040160405180910390fd5b6000828152673ec412a9852d173d60c11b601c526020902082018201546001600160a01b0316610851565b60006001600160a01b0382168060a0610c48826112f1565b901b189392505050565b6000806bffffffffffffffffffffffff83166060610c48826112f1565b8260601b60601c925081600052673ec412a9852d173d60c11b601c52828160a01b176020600020830183015582600052601c600c20600181540163ffffffff81168502610ccb5767ea553b3401336cea851560021b526004601cfd5b9055818360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8138a4505050565b61078b33838361133b565b610d11858585856110b8565b823b156107ea576107ea848484846113dc565b6000818152673ec412a9852d173d60c11b3317601c52602090208101810180546001600160a01b039485169493841693811691908286148302610d765767ceea21b6a1148100831560021b526004601cfd5b856000528160010154925082331486331417610da4576030600c2054610da457634b6e7f186000526004601cfd5b8215610db257600082600101555b85851818905550601c600c8181208054600019019055600084905220805460010163ffffffff81168402610df55767ea553b3401336cea841560021b526004601cfd5b90558082847fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600038a4505050565b610a2f8484848460405180602001604052806000815250610d05565b8160601b60601c915080600052673ec412a9852d173d60c11b601c5260206000208101810180548060601b15610e7e5763c991cbb16000526004601cfd5b831790556000829052601c600c20805460010163ffffffff81168402610eb35767ea553b3401336cea841560021b526004601cfd5b9055808260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8138a45050565b610eec8383836107f1565b813b1561073557610735838383604051806020016040528060008152506113dc565b6000610f19826108ee565b90505060008181526001600160a01b03928316673ec412a9852d173d60c11b8117601c526020909120820182018054919382169182610f605763ceea21b66000526004601cfd5b82600052816001015480861484871417861517610f8f576030600c2054610f8f57634b6e7f186000526004601cfd5b8015610f9d57600083600101555b5082189055601c600c208054600019019055816000827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8238a4505050565b60008181526001600160a01b03928316673ec412a9852d173d60c11b8117601c526020909120820182018054919360019216806110215763ceea21b66000526004601cfd5b80851461104057806000526030600c2054611040578160010154851492505b505092915050565b8260601b60601c92508160601b60601c9150801515905081673ec412a9852d173d60c11b17601c5282600052806030600c20558060005281837f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160206000a3505050565b61078b6000838361133b565b60008181526001600160a01b03948516673ec412a9852d173d60c11b8117601c52602090912082018201805491959485169493841693821691828614830261110f5767ceea21b6a1148100831560021b526004601cfd5b856000528160010154925082871486881417871517611140576030600c205461114057634b6e7f186000526004601cfd5b821561114e57600082600101555b85851818905550601c600c8181208054600019019055600084905220805460010163ffffffff811684026111915767ea553b3401336cea841560021b526004601cfd5b90558082847fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600038a4610a2f565b6111ca8383610e40565b823b156107355761073560008484846113dc565b61088e600082610f0e565b61078b8282604051806020016040528060008152506111c0565b801515905081601c52670a5a2e7a0000000060085233600052806030600c2055806000528160601b60601c337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160206000a35050565b6112648585856107f1565b833b156107ea576107ea85858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506113dc92505050565b60606080604051019050602081016040526000815280600019835b928101926030600a8206018453600a9004806112c8575050819003601f19909101908152919050565b60405136600082373681206020526010518218601052608860002090508060105260bc19700100000000000000000000000000000051820960801c60071661092757506000919050565b60001960601c828116925083811693508160005283673ec412a9852d173d60c11b17601c52602060002082018201805482169150816113825763ceea21b66000526004601cfd5b8185148515176113a857816000526030600c20546113a857634b6e7f186000526004601cfd5b6001018390558183827f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600038a450505050565b60405163150b7a028082523360208301528560601b60601c604083015283606083015260808083015282518060a08401528015611423578060c08401826020870160045afa505b60208360a48301601c860160008a5af1611446573d15611446573d6000843e3d83fd5b508060e01b8251146114605763d1a57ed66000526004601cfd5b505050505050565b60006020828403121561147a57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146108a557600080fd5b80356001600160a01b038116811461092757600080fd5b80356bffffffffffffffffffffffff8116811461092757600080fd5b6000806000606084860312156114f257600080fd5b6114fb846114aa565b925060208401359150611510604085016114c1565b90509250925092565b60005b8381101561153457818101518382015260200161151c565b50506000910152565b602081526000825180602084015261155c816040850160208701611519565b601f01601f19169190910160400192915050565b60006020828403121561158257600080fd5b5035919050565b6000806040838503121561159c57600080fd5b6115a5836114aa565b946020939093013593505050565b60008083601f8401126115c557600080fd5b50813567ffffffffffffffff8111156115dd57600080fd5b6020830191508360208285010111156115f557600080fd5b9250929050565b60008060008060006080868803121561161457600080fd5b61161d866114aa565b945061162b602087016114aa565b935060408601359250606086013567ffffffffffffffff81111561164e57600080fd5b61165a888289016115b3565b969995985093965092949392505050565b60008060006060848603121561168057600080fd5b611689846114aa565b9250611697602085016114aa565b929592945050506040919091013590565b600080604083850312156116bb57600080fd5b6116c4836114aa565b9150602083013580151581146116d957600080fd5b809150509250929050565b6000602082840312156116f657600080fd5b6108a5826114aa565b6000806040838503121561171257600080fd5b82359150611722602084016114c1565b90509250929050565b6000806000806060858703121561174157600080fd5b61174a856114aa565b935060208501359250604085013567ffffffffffffffff81111561176d57600080fd5b611779878288016115b3565b95989497509550505050565b6000806040838503121561179857600080fd5b6117a1836114aa565b915060208301357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811681146116d957600080fd5b600080604083850312156117e557600080fd5b6117ee836114aa565b9150611722602084016114aa565b7f68747470733a2f2f72656d696c696f2e6f72672f72656d696c696f2f6a736f6e81527f2f0000000000000000000000000000000000000000000000000000000000000060208201526000825161185a816021850160208701611519565b919091016021019291505056fea26469706673582212204ed1a416a0c519bb71fd08a83df31d9115edc02d45c129775a232415f2cc1c5364736f6c634300081c0033"

export const deployMockERC721 = async ({
    anvilRpc
}: {
    anvilRpc: string
}): Promise<Address> => {
    const publicClient = createPublicClient({
        transport: http(anvilRpc),
        chain: foundry
    })

    // Deploy mock ERC721 contract
    const walletClient = getAnvilWalletClient({
        addressIndex: 0,
        anvilRpc
    })

    const counterFactual = getCreate2Address({
        from: "0x4e59b44847b379578588920ca78fbf26c0b4956c",
        salt: toHex(0, { size: 32 }),
        bytecode: MOCK_ERC721_BYTECODE
    })

    const bytecode = await publicClient.getCode({
        address: counterFactual
    })

    if (!bytecode || bytecode === "0x") {
        // If it doesn't exist, deploy it
        await walletClient.sendTransaction({
            data: concat([
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                MOCK_ERC721_BYTECODE
            ]),
            to: "0x4e59b44847b379578588920ca78fbf26c0b4956c"
        })
    }

    return counterFactual
}

// Mint a token to the specified address
export const mintERC721 = async ({
    contractAddress,
    to,
    tokenId,
    anvilRpc
}: {
    contractAddress: Address
    to: Address
    tokenId: bigint
    anvilRpc: string
}): Promise<Hex> => {
    const walletClient = getAnvilWalletClient({
        addressIndex: 0,
        anvilRpc
    })

    const tx = await walletClient.sendTransaction({
        to: contractAddress,
        data: encodeFunctionData({
            abi: parseAbi(["function mint(address to, uint256 id)"]),
            functionName: "mint",
            args: [to, tokenId]
        })
    })

    return tx
}
